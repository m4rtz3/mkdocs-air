{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIR: Airline Information Resource","text":"Info <p>3\u00ba Semestre</p> <p>Raspagem</p>"},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A AIR, abrevia\u00e7\u00e3o para Airline Information Resource (Recurso de informa\u00e7\u00f5es de companhias a\u00e9reas), \u00e9 muito mais do que apenas mais uma plataforma de reservas de voos. Fundada com a vis\u00e3o de simplificar e aprimorar o planejamento de viagens a\u00e9reas para todos os tipos de viajantes, a AIR representa uma abordagem inovadora para a reserva de voos, prezando pela experi\u00eancia do usu\u00e1rio.</p> <ol> <li>Transforma\u00e7\u00e3o da Experi\u00eancia de Reserva de Voos: O projeto da AIR est\u00e1 revolucionando a forma como as pessoas reservam voos, oferecendo uma plataforma centrada no usu\u00e1rio e focada na personaliza\u00e7\u00e3o. Ao utilizar tecnologias avan\u00e7adas, como web scraping e intelig\u00eancia artificial, estamos proporcionando aos usu\u00e1rios uma experi\u00eancia de reserva de voos mais intuitiva e eficiente.</li> <li>Acessibilidade e Personaliza\u00e7\u00e3o: A AIR est\u00e1 comprometida em tornar a reserva de voos acess\u00edvel a todos os viajantes, independentemente de seu or\u00e7amento ou prefer\u00eancias de viagem. Ao oferecer recomenda\u00e7\u00f5es de voos altamente personalizadas e uma ampla gama de recursos exclusivos, estamos tornando o processo de reserva de voos mais conveniente e satisfat\u00f3rio para todos os usu\u00e1rios.</li> <li>Inova\u00e7\u00e3o e Qualidade de Servi\u00e7o: Nossa plataforma se destaca pela inova\u00e7\u00e3o e excel\u00eancia em tudo o que fazemos. Com uma equipe dedicada e uma paix\u00e3o por viagens, estamos constantemente buscando formas de melhorar e aprimorar a experi\u00eancia do usu\u00e1rio, oferecendo um servi\u00e7o de alta qualidade e mantendo os mais altos padr\u00f5es de conduta em todas as nossas opera\u00e7\u00f5es.</li> </ol>"},{"location":"#proposta","title":"Proposta","text":"<p>A AIR nasceu de um sonho: tornar a viagem de avi\u00e3o mais acess\u00edvel e mais f\u00e1cil para todos. Os fundadores da empresa, todos apaixonados por viagens, perceberam que havia uma lacuna no mercado de viagens a\u00e9reas. Embora houvesse muitos sites e aplicativos que ofereciam reservas de voos, a maioria deles n\u00e3o era voltada para o usu\u00e1rio. Eles eram muitas vezes confusos e complicados de usar, e n\u00e3o ofereciam muitas op\u00e7\u00f5es para personalizar a busca pelos voos. Com isso em mente, a AIR se prop\u00f4s a criar uma plataforma que n\u00e3o s\u00f3 oferecesse reservas de voos, mas tamb\u00e9m tornasse o processo de busca de voos mais personalizado e f\u00e1cil de usar. A empresa usaria tecnologia de ponta, incluindo web scrapping e intelig\u00eancia artificial, para coletar dados sobre voos e analis\u00e1-los de maneira eficaz. Isso permitiria que a plataforma oferecesse aos usu\u00e1rios as melhores op\u00e7\u00f5es de voos com base em suas prefer\u00eancias e necessidades individuais.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<p>Antes de explorarmos os objetivos da AIR, \u00e9 importante compreender o prop\u00f3sito por tr\u00e1s dessa plataforma inovadora de reservas de voos. A AIR, ou Airline Information Resource, surge como uma resposta aos desafios enfrentados pelos viajantes em um mercado a\u00e9reo complexo e em constante movimento. Seu principal objetivo \u00e9 simplificar e aprimorar a experi\u00eancia de reserva de voos para todos os tipos de viajantes, oferecendo uma abordagem centrada no usu\u00e1rio aliada a tecnologias avan\u00e7adas. Agora, vamos examinar mais de perto os objetivos espec\u00edficos que impulsionam a AIR:</p> <ol> <li>Simplifica\u00e7\u00e3o do processo de reserva: A AIR busca simplificar todo o processo de reserva de voos, desde a pesquisa inicial at\u00e9 a finaliza\u00e7\u00e3o da compra. Isso significa oferecer uma interface intuitiva e f\u00e1cil de usar, permitindo que os usu\u00e1rios naveguem pelas op\u00e7\u00f5es de voos de forma r\u00e1pida e eficiente.</li> <li>Personaliza\u00e7\u00e3o das recomenda\u00e7\u00f5es: Um dos pilares fundamentais da AIR \u00e9 a personaliza\u00e7\u00e3o das recomenda\u00e7\u00f5es de voos. Por meio de tecnologias avan\u00e7adas, como an\u00e1lise de dados e intelig\u00eancia artificial, a plataforma \u00e9 capaz de entender as prefer\u00eancias individuais de cada usu\u00e1rio e oferecer recomenda\u00e7\u00f5es precisas que atendam \u00e0s suas necessidades espec\u00edficas.</li> <li>Melhoria da experi\u00eancia do usu\u00e1rio: Al\u00e9m da reserva de voos, a AIR busca proporcionar uma experi\u00eancia completa e satisfat\u00f3ria aos usu\u00e1rios. Isso inclui a oferta de recursos adicionais, como alertas de pre\u00e7os, informa\u00e7\u00f5es sobre destinos e companhias a\u00e9reas, e a possibilidade de salvar pesquisas para acesso posterior.</li> <li>Acessibilidade: A AIR est\u00e1 empenhada em tornar a reserva de voos acess\u00edvel a todos os tipos de viajantes, independentemente de seu or\u00e7amento ou prefer\u00eancias de viagem. Isso significa garantir que todos os usu\u00e1rios tenham acesso a op\u00e7\u00f5es de voos adequadas e competitivas, promovendo assim uma experi\u00eancia de reserva de voos mais equitativa e acess\u00edvel para todos.</li> </ol>"},{"location":"#missao","title":"Miss\u00e3o","text":"<p>\u00c9 crucial compreender profundamente o significado e a import\u00e2ncia desse aspecto para a identidade e o prop\u00f3sito da empresa. A miss\u00e3o n\u00e3o \u00e9 apenas uma declara\u00e7\u00e3o de inten\u00e7\u00f5es; \u00e9 o cerne que orienta todas as atividades, decis\u00f5es e intera\u00e7\u00f5es da organiza\u00e7\u00e3o. Na ess\u00eancia da miss\u00e3o da AIR reside a vis\u00e3o de criar impacto positivo na experi\u00eancia de viagem dos usu\u00e1rios e na ind\u00fastria de viagens como um todo. \u00c9 um compromisso enraizado em valores que refletem a dedica\u00e7\u00e3o da empresa em atender \u00e0s necessidades dos viajantes, promovendo valores como conveni\u00eancia, acessibilidade, confian\u00e7a, seguran\u00e7a, sustentabilidade, diversidade e inclus\u00e3o. A miss\u00e3o serve como um farol, iluminando o caminho rumo a um objetivo maior: proporcionar uma experi\u00eancia de viagem excepcional que n\u00e3o apenas atenda, mas tamb\u00e9m exceda as expectativas dos viajantes, enquanto contribui para um mundo mais conectado, sustent\u00e1vel e inclusivo.</p> <ol> <li>Facilitar Conex\u00f5es</li> <li>Enriquecer Experi\u00eancias</li> <li>Promover Conveni\u00eancia e Acessibilidade</li> <li>Inspirar Confian\u00e7a e Seguran\u00e7a</li> <li>Fomentar a Sustentabilidade</li> <li>Valorizar a Diversidade e Inclus\u00e3o</li> </ol>"},{"location":"#valores","title":"Valores","text":"<p>A AIR n\u00e3o \u00e9 apenas uma plataforma de reserva de voos; \u00e9 uma promessa de excel\u00eancia, inova\u00e7\u00e3o e satisfa\u00e7\u00e3o do cliente. Esses valores s\u00e3o a b\u00fassola que orienta todas as iniciativas da empresa, refletindo seu compromisso inabal\u00e1vel com uma experi\u00eancia de viagem superior. Vamos agora nos aprofundar nos valores que moldam a identidade e as pr\u00e1ticas da AIR:</p> <ol> <li>Excel\u00eancia: Na AIR, buscamos constantemente a excel\u00eancia em tudo o que fazemos. Desde a coleta de dados at\u00e9 o atendimento ao cliente, cada aspecto de nossa plataforma \u00e9 projetado para superar as expectativas e fornecer uma experi\u00eancia de reserva de voos excepcional.</li> <li>Inova\u00e7\u00e3o: Estamos comprometidos em impulsionar a inova\u00e7\u00e3o no setor de viagens a\u00e9reas. Utilizamos tecnologias de ponta e adotamos uma mentalidade de experimenta\u00e7\u00e3o constante para encontrar maneiras novas e melhores de atender \u00e0s necessidades de nossos clientes.</li> <li>Confian\u00e7a: A confian\u00e7a \u00e9 a base de todos os relacionamentos na AIR. Trabalhamos com transpar\u00eancia, integridade e responsabilidade para garantir que nossos clientes possam confiar em n\u00f3s para fornecer informa\u00e7\u00f5es precisas e servi\u00e7os confi\u00e1veis.</li> <li>Personaliza\u00e7\u00e3o: Reconhecemos que cada cliente \u00e9 \u00fanico, e \u00e9 por isso que nos esfor\u00e7amos para oferecer uma experi\u00eancia verdadeiramente personalizada. Desde recomenda\u00e7\u00f5es de voos at\u00e9 suporte ao cliente, adaptamos nossos servi\u00e7os para atender \u00e0s necessidades individuais de cada viajante.</li> <li>Acessibilidade: Acreditamos que viajar deve ser acess\u00edvel a todos. Por isso, estamos empenhados em oferecer uma ampla gama de op\u00e7\u00f5es de voos e pre\u00e7os competitivos para garantir que todos os viajantes possam encontrar e reservar voos que atendam \u00e0s suas necessidades e or\u00e7amento.</li> </ol>"},{"location":"sobrenos/","title":"Sobre n\u00f3s","text":""},{"location":"sobrenos/#contributors","title":"Contributors","text":"Name Eshley Maria Silva Felipe Lira Felipe Murakami Giovanna S. Gomes Jo\u00e3o Pedro Mascena Pietro Andrade"},{"location":"sobrenos/#source","title":"Source","text":"<p>Circa of 70% of the whole conceptual texts were generated by ChatGPT nonetheless all of them were revised by the editor. The sections of handout was produced by the contributors.</p>"},{"location":"api/google-flights/","title":"Spring Boot Cloud","text":"<p>Containering:</p> <p>https://serpapi.com/google-flights-api</p>"},{"location":"devops/docker/","title":"Docker","text":"<p>How to avoid the classical..?</p> <p>The answer is: CONTAINERIZATION.</p> <p>Docker is a platform and tool that enables developers to automate the deployment of applications inside lightweight, portable containers. Containers are a form of virtualization that packages an application and its dependencies together, ensuring consistency across different environments, from development to testing and production.</p> <p>Here are some key concepts and components of Docker:</p> <ul> <li>Containerization: Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software, including the code, runtime, libraries, and system tools. Containers isolate applications from their environment, making them portable and consistent across various systems.</li> <li>Docker Engine: This is the core component of Docker. It is a lightweight and portable runtime that can run containers on various operating systems, including Linux and Windows. The Docker Engine consists of a server, a REST API, and a command-line interface.</li> <li>Docker Image: An image is a lightweight, standalone, and executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files. Images are used to create containers.</li> <li>Dockerfile: A Dockerfile is a text file that contains instructions for building a Docker image. It specifies the base image, sets up the environment, installs dependencies, and configures the application.</li> <li>Registry: Docker images can be stored in registries, which are repositories for sharing and distributing container images. Docker Hub is a popular public registry, and organizations often use private registries to store and manage their proprietary images.</li> <li>Container Orchestration: Docker can be used in conjunction with container orchestration tools like Kubernetes or Docker Swarm to manage the deployment, scaling, and orchestration of containerized applications in production environments.</li> <li>Portability: One of Docker's key advantages is its portability. Since containers encapsulate everything an application needs to run, they can run consistently across different environments, reducing the \"it works on my machine\" problem often encountered in software development.</li> </ul> <p>Docker has become a widely adopted technology in the software development and deployment space due to its ease of use, portability, and the efficiency it brings to the development and deployment lifecycle. It has revolutionized the way applications are packaged, shipped, and deployed, making it easier for developers to build, test, and deploy applications in a more reliable and consistent manner.</p>"},{"location":"devops/docker/#differences-between-docker-and-virtual-machines","title":"Differences between Docker and Virtual Machines","text":"<p>Docker containers and virtual machines (VMs) are both technologies used for virtualization, but they operate at different levels and have distinct characteristics. Here are the key differences between Docker containers and virtual machines:</p> Aspect Docker Containers Virtual Machines Architecture Containers share the host operating system's kernel and isolate the application processes from each other. Each container runs in its own user space but uses the host's kernel. VMs, on the other hand, run a complete operating system, including its own kernel, on top of a hypervisor. Each VM is essentially a full-fledged virtualized computer with its own resources. Resource Efficiency Containers are more lightweight and share the host OS kernel, which makes them more resource-efficient compared to VMs. Containers can start up quickly and consume fewer system resources. VMs have more overhead because each VM requires a full operating system and has its own kernel. This makes VMs less resource-efficient than containers. Isolation Containers provide process-level isolation, meaning that each container runs in its own process space, but they share the same OS kernel. This isolation is generally sufficient for most applications. VMs provide stronger isolation since each VM runs its own operating system and has its own kernel. This makes VMs a better choice in situations where strong isolation is a critical requirement. Portability Containers are highly portable because they encapsulate the application and its dependencies, ensuring consistency across different environments. VMs are less portable due to the larger size and complexity associated with bundling a full operating system with the application. Startup Time Containers can start up very quickly, typically in seconds, making them well-suited for microservices architectures and dynamic scaling. VMs generally have longer startup times, often measured in minutes, due to the time required to boot a full operating system. Resource Utilization Containers share the host OS resources, which can lead to higher density and more efficient resource utilization. VMs have a higher resource overhead because each VM requires its own set of resources, including memory, disk space, and CPU. Use Cases Containers are well-suited for microservices architectures, continuous integration/continuous deployment (CI/CD) pipelines, and scenarios where rapid deployment and scalability are crucial. VMs are suitable for scenarios that require strong isolation, compatibility with various operating systems, and where applications rely on specific OS configurations. <p> </p> Source: Docker vs. Virtual Machines: Differences You Should Know <p>In summary, Docker containers and virtual machines have different levels of abstraction and are suitable for different use cases. Containers are lightweight, portable, and efficient, making them popular for modern application development and deployment practices. Virtual machines provide stronger isolation and are more suitable for scenarios where running multiple instances of different operating systems is necessary. The choice between Docker containers and virtual machines depends on the specific requirements of the application and the environment in which it will be deployed. To install Docker Engine, see Install Docker Engine.</p>"},{"location":"devops/docker/#creating-a-simple-docker","title":"Creating a Simple Docker","text":"Command Description <code>docker run &lt;image&gt;</code> Runs a Docker container from an image. <code>docker ps</code> Lists running Docker containers. <code>docker ps -a</code> Lists all Docker containers, both running and stopped. <code>docker stop &lt;container&gt;</code> Stops a running Docker container. <code>docker rm &lt;container&gt;</code> Removes a Docker container. <code>docker images</code> Lists Docker images. <code>docker rmi &lt;image&gt;</code> Removes a Docker image. <code>docker pull &lt;image&gt;</code> Pulls a Docker image from a Docker registry. <code>docker build -t &lt;tag&gt; .</code> Builds a Docker image from a Dockerfile in the current directory. <code>docker exec -it &lt;container&gt; &lt;command&gt;</code> Executes a command in a running Docker container. <code>docker logs &lt;container&gt;</code> Fetches the logs of a Docker container. <p>Hello Markdown!</p> pip install termynalInstalled <pre><code>FROM openjdk:17-alpine\nVOLUME /tmp\nARG JAR_FILE=target/gateway-0.0.1-SNAPSHOT.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <p>https://docs.docker.com/engine/install/</p> <p>https://www.docker.com/blog/how-to-use-your-own-registry-2/</p> <ol> <li> <p>Docker vs. Virtual Machines: Differences You Should Know \u21a9</p> </li> </ol>"},{"location":"devops/git/","title":"Git","text":"<p>Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It was created by Linus Torvalds in 2005 for development of the Linux kernel.</p> <p>Key features of Git include:</p> <ul> <li>Distributed Version Control: This means that every user has a complete copy of the project repository on their local machine. This allows for operations to be performed offline and provides a backup in case the central repository fails.</li> <li>Branching and Merging: Git's branching model allows developers to work on different features or bugs in isolation, without affecting the main codebase. These branches can then be merged back into the main codebase when the work is complete.</li> <li>Speed: Git is designed to be fast and efficient, even for large projects.</li> <li>Data Integrity: Git uses a data model that ensures the cryptographic integrity of every bit of your project. Every file and commit is checksummed and retrieved by its checksum when checked back out.</li> <li>Staging Area: Git provides a staging area or \"index\" that allows you to format and review your commits before completing the commit.</li> </ul> <p>SCM - Supply-chain-management software</p> <p>https://twitter.com/milan_milanovic/status/1745435542127349899</p>"},{"location":"devops/maven/","title":"Maven","text":"<p>Maven uses an XML file to describe the software project being built, its dependencies on other external modules and components, the build order, directories, and required plugins. It comes with pre-defined targets for performing certain well-defined tasks such as compilation of code and its packaging.</p> <p>Key Features: - Simple project setup that follows best practices. - Dependency management including automatic updating, dependency closures (also known as transitive dependencies) - Able to easily work with multiple projects at the same time. - Large and mature community with a large ecosystem of plugins and integrations.</p> <pre><code>mvn clean package\n</code></pre> <pre><code>mvn clean install\n</code></pre> <pre><code>mvn clean package spring-boot:run\n</code></pre> <pre><code>mvn versions:display-dependency-updates\n</code></pre> <pre><code>mvn dependency:analyze\n</code></pre> <p>more about Maven dependency plugin</p>"},{"location":"devops/maven/#gradle","title":"Gradle","text":"<p>Gradle is another build automation tool that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven for declaring the project configuration. Gradle provides a platform to support the entire development lifecycle of a software project.</p> <p>Key Features: - Declarative builds and build-by-convention. - Language for dependency-based programming. - Structure your build. - Deep API. - Multi-project builds. - Many ways to manage dependencies. - Integration with existing structures. - Ease of migration.</p>"},{"location":"diagramas/diagramas/","title":"Diagramas","text":""},{"location":"diagramas/diagramas/#rota","title":"ROTA","text":""},{"location":"diagramas/diagramas/#cadastro-e-login-do-usuario","title":"Cadastro e Login do Usu\u00e1rio","text":"<pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n\n    User-&gt;&gt;Frontend: Access Home Page\n    Frontend-&gt;&gt;Backend: POST /consult-travel\n    Backend--&gt;&gt;Frontend: Return best routes\n    Frontend--&gt;&gt;User: Display best routes\n    User-&gt;&gt;Frontend: Create an account\n    Frontend-&gt;&gt;Backend: POST /create-account\n    Backend--&gt;&gt;Frontend: Account created\n    User-&gt;&gt;Frontend: Login\n    Frontend-&gt;&gt;Backend: POST /login\n    Backend--&gt;&gt;Frontend: Login successful\n    Frontend--&gt;&gt;User: Access Dashboard</code></pre>"},{"location":"diagramas/diagramas/#interacao","title":"INTERA\u00c7\u00c3O","text":""},{"location":"diagramas/diagramas/#usuario-e-chat-bot","title":"Usu\u00e1rio e Chat-Bot","text":"<pre><code>sequenceDiagram\n    Actor User as User\n    Participant Frontend as Frontend\n    Participant Backend as Backend\n\n    User-&gt;&gt;Frontend: Access Chat-bot\n    Frontend-&gt;&gt;Backend: GET /chat-bot\n    Backend--&gt;&gt;Frontend: Return Chat-bot Interface\n    Frontend--&gt;&gt;User: Display Chat-bot Interface\n    User-&gt;&gt;Frontend: Enter Question\n    Frontend-&gt;&gt;Backend: POST /submit-question\n    Backend--&gt;&gt;Frontend: Return Answer\n    Frontend--&gt;&gt;User: Display Answer</code></pre>"},{"location":"iniciando/iniciando/","title":"Iniciando","text":""},{"location":"iniciando/iniciando/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Para rodar a nossa plataforma sem precisar escutar o tal do:</p> <p></p> <p>Siga o tutorial abaixo para inicializar cada componente do projeto.</p> FrontendBackendDockerRaspagem"},{"location":"plataforma/busca/","title":"Busca","text":"<p>Spring Cloud Discovery is a module in the Spring Cloud framework that provides a way for services to discover and communicate with each other in a distributed system. It helps manage the dynamic nature of microservices by allowing them to register themselves and discover other services without hardcoding their locations.</p> <p>In a distributed system, services often need to communicate with each other to fulfill their functionalities. However, the locations of these services may change frequently due to scaling, failures, or deployments. Spring Cloud Discovery solves this problem by providing a service registry where services can register themselves and provide information about their location, such as IP address and port.</p> <p>The service registry acts as a central database of all the services in the system. When a service needs to communicate with another service, it can query the service registry to obtain the necessary information. This allows services to be decoupled from each other and eliminates the need for hardcoding service locations in the code.</p> <p>Spring Cloud Discovery supports multiple service registry implementations, such as Netflix Eureka, Consul, and ZooKeeper. These implementations provide additional features like service health checks, load balancing, and failover.</p> <p>To use Spring Cloud Discovery, you need to include the necessary dependencies in your project and configure the service registry implementation you want to use. Then, you can annotate your services with @EnableDiscoveryClient to enable service registration and discovery. Spring Cloud Discovery will automatically register your services with the service registry and provide a client library to query the registry for service information.</p> <p>Here's an example of how you can use Spring Cloud Discovery with Netflix Eureka:</p> <pre><code>@SpringBootApplication\n@EnableDiscoveryClient\npublic class MyServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyServiceApplication.class, args);\n    }\n}\n</code></pre> <p>In this example, the @EnableDiscoveryClient annotation enables service registration and discovery using the configured service registry. When the application starts, it will register itself with the service registry and be discoverable by other services.</p> <p>Overall, Spring Cloud Discovery simplifies the process of service discovery and communication in a distributed system, making it easier to build and maintain microservices architectures.</p>"},{"location":"plataforma/conceito/","title":"Conceito","text":""},{"location":"plataforma/conceito/#conceito","title":"Conceito","text":"<p>A AIR (Airline Information Resource) \u00e9 uma plataforma inovadora e abrangente que visa transformar a maneira como os usu\u00e1rios buscam e reservam voos. Diferente dos sites de reserva convencionais, a AIR combina tecnologia de ponta com uma abordagem centrada no usu\u00e1rio para proporcionar uma experi\u00eancia de reserva de voos altamente personalizada e eficiente. O conceito da AIR \u00e9 baseado na premissa de que encontrar o voo ideal deve ser uma tarefa simples e intuitiva, mesmo diante da complexidade do mercado de viagens a\u00e9reas. Para atingir esse objetivo, a AIR integra v\u00e1rias tecnologias avan\u00e7adas, incluindo web scraping, intelig\u00eancia artificial e an\u00e1lise de dados em tempo real. Essas tecnologias permitem que a plataforma colete e analise uma vasta quantidade de informa\u00e7\u00f5es sobre voos, pre\u00e7os, hor\u00e1rios e rotas diretamente das companhias a\u00e9reas e outros provedores de servi\u00e7os de viagem.</p> <p>A AIR permite que os usu\u00e1rios busquem voos de maneira eficiente, apresentando uma compara\u00e7\u00e3o detalhada das op\u00e7\u00f5es dispon\u00edveis com base nas prefer\u00eancias individuais. A plataforma analisa pre\u00e7os, hor\u00e1rios, escalas e companhias a\u00e9reas para fornecer as melhores op\u00e7\u00f5es de voos para cada usu\u00e1rio. Utilizando algoritmos de intelig\u00eancia artificial, a AIR oferece recomenda\u00e7\u00f5es de voos personalizadas, levando em considera\u00e7\u00e3o os h\u00e1bitos de viagem do usu\u00e1rio, prefer\u00eancias de hor\u00e1rio, or\u00e7amento e at\u00e9 mesmo companhias a\u00e9reas favoritas para sugerir as melhores op\u00e7\u00f5es dispon\u00edveis. Al\u00e9m disso, os usu\u00e1rios podem configurar alertas de pre\u00e7o para monitorar as tarifas dos voos de interesse, sendo notificados quando h\u00e1 uma queda significativa nos pre\u00e7os, ajudando-os a aproveitar as melhores ofertas.</p> <p>A AIR tamb\u00e9m oferece ferramentas de planejamento que permitem aos usu\u00e1rios registrar viagens futuras, salvar pesquisas e criar listas de desejos com voos de interesse. Esses recursos tornam o processo de planejamento de viagens mais organizado e conveniente. A plataforma se destaca ainda por sua interface intuitiva e f\u00e1cil de usar, tornando simples para os usu\u00e1rios navegarem pelas diversas op\u00e7\u00f5es de voos dispon\u00edveis e escolherem aquelas que melhor atendam \u00e0s suas necessidades espec\u00edficas. Ao fornecer uma experi\u00eancia completa e centrada no usu\u00e1rio, a AIR n\u00e3o apenas simplifica a reserva de voos, mas tamb\u00e9m torna a experi\u00eancia de viagem mais acess\u00edvel, conveniente e satisfat\u00f3ria para todos os tipos de viajantes.</p>"},{"location":"plataforma/microservico/","title":"Microsservi\u00e7o","text":""},{"location":"plataforma/microservico/#microservices-concepts","title":"Microservices Concepts","text":"<p>Microservices, also known as the microservices architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.</p> <p>Key concepts of microservices include:</p> <ul> <li>Single Responsibility: Each microservice should have a single responsibility and should implement a single business capability.</li> <li>Independence: Microservices should be able to run and evolve independently of each other. They should be independently deployable and scalable.</li> <li>Decentralization: Microservices architecture favors decentralized governance. Teams have the freedom to choose the best technology stack that suits their service.</li> <li>Isolation of Failures: If a microservice fails, it should not impact the availability of other services.</li> <li>Data Isolation: Each microservice should have its own database to ensure that the services are loosely coupled and can evolve independently.</li> <li>Communication: Microservices communicate with each other through well-defined APIs and protocols, typically HTTP/REST with JSON or gRPC with Protobuf.</li> <li>Infrastructure Automation: Due to the distributed nature of the microservices architecture, automation of infrastructure is a must. This includes automated provisioning, scaling, and deployment.</li> <li>Observability: With many different services, it's important to have excellent monitoring and logging to detect and diagnose problems.</li> </ul>"},{"location":"plataforma/microservico/#domain-driven-design","title":"Domain Driven Design","text":"<p>Domain-Driven Design (DDD) is a software development approach that emphasizes collaboration between technical experts and domain experts. The goal is to create software that is a deep reflection of the underlying domain, which is the specific area of business or activity that the software is intended to support.</p> <p>Key concepts of DDD include:</p> <ul> <li>Ubiquitous Language: A common language established between developers and domain experts, used to describe all aspects of the domain.</li> <li>Bounded Context: A boundary within which a particular model is defined and applicable.</li> <li>Entities: Objects that have a distinct identity that persists over time and across different representations.</li> <li>Value Objects: Objects that are defined by their attributes, not their identity.</li> <li>Aggregates: Clusters of entities and value objects that are treated as a single unit.</li> <li>Repositories: They provide a way to obtain references to aggregates.</li> <li>Domain Events: Events that domain experts care about.</li> <li>Services: Operations that don't naturally belong to any entity or value object.</li> </ul> <p>By focusing on the domain and domain logic, DDD provides techniques to develop complex systems targeting real-world scenarios. It helps to reduce the complexity by dividing the system into manageable and interconnected parts.</p> <p> </p> Source: System Design 101 - Microservice Architecture"},{"location":"plataforma/microservico/#design-a-microservice-platform","title":"Design a Microservice Platform","text":"<pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n      config[\"Configuration\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery\n  click gateway \"../gateway/\" \"Gateway\"\n  click discovery \"../discovery/\" \"Discovery\"\n  click auth \"../auth-service/\" \"Auth\"\n  click config \"../config/\" \"Configuration\"\n  click lb \"../load-balancing/\" \"Load Balance\"</code></pre>"},{"location":"plataforma/microservico/#containering","title":"Containering:","text":"<p>Many microservices implies in many ports, then a complicated environment to manage</p>"},{"location":"plataforma/microservico/#gateway","title":"Gateway","text":""},{"location":"plataforma/microservico/#discovery","title":"Discovery","text":""},{"location":"plataforma/microservico/#communication","title":"Communication","text":"<ol> <li> <p>XU, A., System Design 101.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Domain Driven Design \u21a9</p> </li> </ol>"}]}